From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Wed, 12 Apr 2017 10:08:10 -0700
Subject: [PATCH] Fix output discrepancies based on running JVM


diff --git a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
index 1e9478b91610c6cc972dc5dbb4f8643f9312b8cb..caf062136e25d9fda01026ec981e88c77b63b818 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassesProcessor.java
@@ -248,6 +248,7 @@ public class ClassesProcessor {
                 stack.add(nestedClass);
               }
             }
+            Collections.sort(superNode.nested);
           }
         }
       }
@@ -359,7 +360,7 @@ public class ClassesProcessor {
   }
 
 
-  public static class ClassNode {
+  public static class ClassNode implements Comparable<ClassNode> {
     public static final int CLASS_ROOT = 0;
     public static final int CLASS_MEMBER = 1;
     public static final int CLASS_ANONYMOUS = 2;
@@ -443,6 +444,12 @@ public class ClassesProcessor {
       return node.wrapper;
     }
 
+    @Override
+    public int compareTo(ClassNode o) {
+      //TODO: Take line numbers into account?
+      return this.classStruct.qualifiedName.compareTo(o.classStruct.qualifiedName);
+    }
+
     public static class LambdaInformation {
       public String class_name;
       public String method_name;
diff --git a/src/org/jetbrains/java/decompiler/main/rels/LambdaProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/LambdaProcessor.java
index 3b2e74d42ec13514293299e77d579e40736d4aae..2eeb1b492843b7b7b752796a7f988319e8fb4e97 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/LambdaProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/LambdaProcessor.java
@@ -126,6 +126,8 @@ public class LambdaProcessor {
       mt.releaseResources();
     }
 
+    Collections.sort(node.nested);
+
     // build class hierarchy on lambda
     for (ClassNode nd : node.nested) {
       if (nd.type == ClassNode.CLASS_LAMBDA) {
@@ -135,6 +137,7 @@ public class LambdaProcessor {
 
           parent_class.nested.add(nd);
           nd.parent = parent_class;
+          Collections.sort(parent_class.nested);
         }
       }
     }
diff --git a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
index 0858c6880deca0e606554820f94f1e81f29b1e8d..2aaa54e835e78c573c51dff32170fc7379db3b45 100644
--- a/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
+++ b/src/org/jetbrains/java/decompiler/main/rels/NestedClassProcessor.java
@@ -240,6 +240,7 @@ public class NestedClassProcessor {
       if (setEnclosing.contains(node.classStruct.qualifiedName)) {
         node.nested.add(child);
         child.parent = node;
+        Collections.sort(node.nested);
 
         return true;
       }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/DomHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/DomHelper.java
index 144db3b3004cecdcd4ddfd0c6364c457c97dc588..11c723e3ae4e8d3e8f0a947a959a56a671c096a5 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/DomHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/DomHelper.java
@@ -207,7 +207,7 @@ public class DomHelper {
 
     RootStatement root = graphToStatement(graph);
 
-    if (!processStatement(root, new HashMap<>())) {
+    if (!processStatement(root, new LinkedHashMap<>())) {
 
       //			try {
       //				DotExporter.toDotFile(root.getFirst().getStats().get(13), new File("c:\\Temp\\stat1.dot"));
@@ -217,7 +217,7 @@ public class DomHelper {
       throw new RuntimeException("parsing failure!");
     }
 
-    LabelHelper.lowContinueLabels(root, new HashSet<>());
+    LabelHelper.lowContinueLabels(root, new LinkedHashSet<>());
 
     SequenceHelper.condenseSequences(root);
     root.buildMonitorFlags();
@@ -482,11 +482,11 @@ public class DomHelper {
 
         boolean same = (post == head);
 
-        HashSet<Statement> setNodes = new HashSet<>();
+        HashSet<Statement> setNodes = new LinkedHashSet<>();
         HashSet<Statement> setPreds = new HashSet<>();
 
         // collect statement nodes
-        HashSet<Statement> setHandlers = new HashSet<>();
+        HashSet<Statement> setHandlers = new LinkedHashSet<>();
         setHandlers.add(head);
         while (true) {
 
@@ -634,7 +634,7 @@ public class DomHelper {
               if (setOldNodes.contains(key)) {
                 Set<Integer> setNew = mapExtPost.get(newid);
                 if (setNew == null) {
-                  mapExtPost.put(newid, setNew = new HashSet<>());
+                  mapExtPost.put(newid, setNew = new LinkedHashSet<>());
                 }
                 setNew.addAll(set);
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
index 5d41ff59a108ad2eabc361faa26145de40a28df5..81c822a5222c7c8c60d80358fb707f65ecb4aa30 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
@@ -812,6 +812,7 @@ public class ExprProcessor implements CodeConstants {
     }
 
     TextBuffer buf = new TextBuffer();
+    lst = Exprent.sortIndexed(lst);
 
     for (Exprent expr : lst) {
       TextBuffer content = expr.toJava(indent, tracer);
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java
index 0123691085d7ab1eee3b10d0eef0deaaececb3fd..aeec8b73434f2e48fda5b20e55cd32f34af26baf 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/FinallyProcessor.java
@@ -577,10 +577,17 @@ public class FinallyProcessor {
     // so remove dummy exit
     startBlocks.remove(graph.getLast());
     startBlocks.removeAll(tryBlocks);
+    List<BasicBlock> starts = new ArrayList<BasicBlock>(startBlocks);
+    Collections.sort(starts, new Comparator<BasicBlock>() {
+      @Override
+      public int compare(BasicBlock o1, BasicBlock o2) {
+        return o2.id - o1.id;
+      }
+    });
 
     List<Area> lstAreas = new ArrayList<>();
 
-    for (BasicBlock start : startBlocks) {
+    for (BasicBlock start : starts) {
 
       Area arr = compareSubgraphsEx(graph, start, catchBlocks, first, finallytype, mapLast, skippedFirst);
       if (arr == null) {
@@ -603,8 +610,17 @@ public class FinallyProcessor {
     //			DotExporter.toDotFile(graph, new File("c:\\Temp\\fern5.dot"), true);
     //		} catch(Exception ex){ex.printStackTrace();}
 
+    List<Entry<BasicBlock, Boolean>> lasts = new ArrayList<Entry<BasicBlock, Boolean>>(mapLast.entrySet());
+    // We must sort here to prevent decompile differences deriving from hash maps.
+    Collections.sort(lasts, new Comparator<Entry<BasicBlock, Boolean>>() {
+      @Override
+      public int compare(Entry<BasicBlock, Boolean> o1, Entry<BasicBlock, Boolean> o2) {
+        return o1.getKey().id - o2.getKey().id;
+      }
+    });
+
     // INFO: empty basic blocks may remain in the graph!
-    for (Entry<BasicBlock, Boolean> entry : mapLast.entrySet()) {
+    for (Entry<BasicBlock, Boolean> entry : lasts) {
       BasicBlock last = entry.getKey();
 
       if (entry.getValue()) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java
index bba1484d52dd5e84c3357ec15c922a7f53ff77ba..0297f038815d2a609146c69982bcc28ca2d7e5ce 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/LabelHelper.java
@@ -33,7 +33,7 @@ public class LabelHelper {
 
     liftClosures(root);
 
-    lowContinueLabels(root, new HashSet<>());
+    lowContinueLabels(root, new LinkedHashSet<>());
 
     lowClosures(root);
   }
@@ -131,7 +131,7 @@ public class LabelHelper {
         lowContinueLabels(st, edges);
       }
       else {
-        lowContinueLabels(st, new HashSet<>());
+        lowContinueLabels(st, new LinkedHashSet<>());
       }
     }
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/DominatorTreeExceptionFilter.java b/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/DominatorTreeExceptionFilter.java
index 0cee74cfb876b19acb165628676b4c79a2f248b8..7c42469965f18491776440ec695e67a6fc43d67c 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/DominatorTreeExceptionFilter.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/DominatorTreeExceptionFilter.java
@@ -27,10 +27,10 @@ public class DominatorTreeExceptionFilter {
   private final Statement statement;
 
   // idom, nodes
-  private final Map<Integer, Set<Integer>> mapTreeBranches = new HashMap<>();
+  private final Map<Integer, Set<Integer>> mapTreeBranches = new LinkedHashMap<>();
 
   // handler, range nodes
-  private final Map<Integer, Set<Integer>> mapExceptionRanges = new HashMap<>();
+  private final Map<Integer, Set<Integer>> mapExceptionRanges = new LinkedHashMap<>();
 
   // handler, head dom
   private Map<Integer, Integer> mapExceptionDoms = new HashMap<>();
@@ -86,7 +86,7 @@ public class DominatorTreeExceptionFilter {
 
       Set<Integer> set = mapTreeBranches.get(idom);
       if (set == null) {
-        mapTreeBranches.put(idom, set = new HashSet<>());
+        mapTreeBranches.put(idom, set = new LinkedHashSet<>());
       }
       set.add(key);
     }
@@ -101,7 +101,7 @@ public class DominatorTreeExceptionFilter {
       List<Statement> lstPreds = stat.getNeighbours(StatEdge.TYPE_EXCEPTION, Statement.DIRECTION_BACKWARD);
       if (!lstPreds.isEmpty()) {
 
-        Set<Integer> set = new HashSet<>();
+        Set<Integer> set = new LinkedHashSet<>();
 
         for (Statement st : lstPreds) {
           set.add(st.id);
@@ -164,7 +164,7 @@ public class DominatorTreeExceptionFilter {
             }
             else {
               // exit = map.containsKey(handler)?-1:mapChild.get(handler); FIXME: Eclipse bug?
-              exit = map.containsKey(handler) ? -1 : mapChild.get(handler);
+              exit = map.containsKey(handler) ? Integer.valueOf(-1) : mapChild.get(handler);
             }
 
             if (exit != null) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/FastExtendedPostdominanceHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/FastExtendedPostdominanceHelper.java
index 9a4e046f5470f9ca2d103e721bd78b29ba0da210..f232dc9510530b8dae62478dd9ae7adc02a7db83 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/FastExtendedPostdominanceHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/decompose/FastExtendedPostdominanceHelper.java
@@ -28,9 +28,9 @@ public class FastExtendedPostdominanceHelper {
 
   private List<Statement> lstReversePostOrderList;
 
-  private HashMap<Integer, FastFixedSet<Integer>> mapSupportPoints = new HashMap<>();
+  private HashMap<Integer, FastFixedSet<Integer>> mapSupportPoints = new LinkedHashMap<>();
 
-  private final HashMap<Integer, FastFixedSet<Integer>> mapExtPostdominators = new HashMap<>();
+  private final HashMap<Integer, FastFixedSet<Integer>> mapExtPostdominators = new LinkedHashMap<>();
 
   private Statement statement;
 
@@ -40,7 +40,7 @@ public class FastExtendedPostdominanceHelper {
 
     this.statement = statement;
 
-    HashSet<Integer> set = new HashSet<>();
+    HashSet<Integer> set = new LinkedHashSet<>();
     for (Statement st : statement.getStats()) {
       set.add(st.id);
     }
@@ -68,7 +68,9 @@ public class FastExtendedPostdominanceHelper {
     Set<Entry<Integer, FastFixedSet<Integer>>> entries = mapExtPostdominators.entrySet();
     HashMap<Integer, Set<Integer>> res = new HashMap<>(entries.size());
     for (Entry<Integer, FastFixedSet<Integer>> entry : entries) {
-      res.put(entry.getKey(), entry.getValue().toPlainSet());
+      List<Integer> lst = new ArrayList<>(entry.getValue().toPlainSet());
+      Collections.sort(lst); // Order Matters!
+      res.put(entry.getKey(), new LinkedHashSet<>(lst));
     }
 
     return res;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
index 612fd37cecae7323963b4ea499ed259c920fd4c3..85f7d004328ba61b25b0f6bc0d4f18b58a9f2e20 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
@@ -190,15 +190,15 @@ public class ConstExprent extends Exprent {
           }
         }
         else if (Float.isNaN(floatVal)) {
-          return new TextBuffer("0.0F / 0.0");
+          return new TextBuffer("0.0F / 0.0F");
         }
         else if (floatVal == Float.POSITIVE_INFINITY) {
-          return new TextBuffer("1.0F / 0.0");
+          return new TextBuffer("1.0F / 0.0F");
         }
         else if (floatVal == Float.NEGATIVE_INFINITY) {
-          return new TextBuffer("-1.0F / 0.0");
+          return new TextBuffer("-1.0F / 0.0F");
         }
-        return new TextBuffer(value.toString()).append('F');
+        return new TextBuffer(trimZeros(value.toString())).append('F');
 
       case CodeConstants.TYPE_DOUBLE:
         double doubleVal = ((Double)value).doubleValue();
@@ -220,15 +220,15 @@ public class ConstExprent extends Exprent {
           }
         }
         else if (Double.isNaN(doubleVal)) {
-          return new TextBuffer("0.0D / 0.0");
+          return new TextBuffer("0.0D / 0.0D");
         }
         else if (doubleVal == Double.POSITIVE_INFINITY) {
-          return new TextBuffer("1.0D / 0.0");
+          return new TextBuffer("1.0D / 0.0D");
         }
         else if (doubleVal == Double.NEGATIVE_INFINITY) {
-          return new TextBuffer("-1.0D / 0.0");
+          return new TextBuffer("-1.0D / 0.0D");
         }
-        return new TextBuffer(value.toString()).append('D');
+        return new TextBuffer(trimZeros(value.toString())).append('D');
 
       case CodeConstants.TYPE_NULL:
         return new TextBuffer("null");
@@ -246,6 +246,18 @@ public class ConstExprent extends Exprent {
 
     throw new RuntimeException("invalid constant type: " + constType);
   }
+  
+  // Different JVM implementations/version display Floats and Doubles with different number of trailing zeros.
+  // This trims them all down to only the necessary amount.
+  private static String trimZeros(String value) {
+      int i = value.length() - 1;
+      while (i >= 0 && value.charAt(i) == '0') {
+          i--;
+      }
+      if (value.charAt(i) == '.')
+        i++;
+      return value.substring(0, i + 1);
+  }
 
   private static String convertStringToJava(String value, boolean ascii) {
     char[] arr = value.toCharArray();
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
index a7864235a9824d3895f5cff83ee11d028933f398..c3d380784d95172f9fa17d301c39fa2910078b94 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
@@ -27,7 +27,10 @@ import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
 import org.jetbrains.java.decompiler.struct.match.MatchNode.RuleValue;
 
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map.Entry;
@@ -138,6 +141,38 @@ public class Exprent implements IMatchable {
       }
     }
   }
+
+  public static List<Exprent> sortIndexed(List<Exprent> lst) {
+      List<Exprent> ret = new ArrayList<Exprent>();
+      List<VarExprent> defs = new ArrayList<VarExprent>();
+
+      Comparator<VarExprent> comp = new Comparator<VarExprent>() {
+        public int compare(VarExprent o1, VarExprent o2) {
+          return o1.getIndex() - o2.getIndex();
+        }
+      };
+
+      for (Exprent exp : lst) {
+        boolean isDef = exp instanceof VarExprent && ((VarExprent)exp).isDefinition();
+        if (!isDef) {
+          if (defs.size() > 0) {
+            Collections.sort(defs, comp);
+            ret.addAll(defs);
+            defs.clear();
+          }
+          ret.add(exp);
+        }
+        else {
+          defs.add((VarExprent)exp);
+        }
+      }
+
+      if (defs.size() > 0) {
+        Collections.sort(defs, comp);
+        ret.addAll(defs);
+      }
+      return ret;
+    }
   
   // *****************************************************************************
   // IMatchable implementation
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAConstructorSparseEx.java b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAConstructorSparseEx.java
index 19ef39ad5701f94393b86a4cd515af251a3ba2cd..b6a2245636a34e824abc3f55940fa60d21d06512 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAConstructorSparseEx.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAConstructorSparseEx.java
@@ -73,7 +73,7 @@ public class SSAConstructorSparseEx {
     // DotExporter.toDotFile(dgraph, new File("c:\\Temp\\gr12_my.dot"));
     // } catch(Exception ex) {ex.printStackTrace();}
 
-    HashSet<Integer> setInit = new HashSet<>();
+    List<Integer> setInit = new ArrayList<>();
     for (int i = 0; i < 64; i++) {
       setInit.add(i);
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAUConstructorSparseEx.java b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAUConstructorSparseEx.java
index fe22e61dc2ed258f2f672458d6c3e964efeeba0a..01d21d5f566ad21ac5a38fcff8a48c1595420903 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAUConstructorSparseEx.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/sforms/SSAUConstructorSparseEx.java
@@ -88,7 +88,7 @@ public class SSAUConstructorSparseEx {
     FlattenStatementsHelper flatthelper = new FlattenStatementsHelper();
     DirectGraph dgraph = flatthelper.buildDirectGraph(root);
 
-    HashSet<Integer> setInit = new HashSet<>();
+    List<Integer> setInit = new ArrayList<>();
     for (int i = 0; i < 64; i++) {
       setInit.add(i);
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/GeneralStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/GeneralStatement.java
index b2321e5ecfdbca1eccfdf41ff3b7dc979e9df7df..9f2a02ce0ac19722a507c8efa42f1179da56e875 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/GeneralStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/GeneralStatement.java
@@ -19,7 +19,8 @@ import org.jetbrains.java.decompiler.main.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 
 import java.util.Collection;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.Set;
 
 
 public class GeneralStatement extends Statement {
@@ -39,7 +40,7 @@ public class GeneralStatement extends Statement {
     first = head;
     stats.addWithKey(head, head.id);
 
-    HashSet<Statement> set = new HashSet<>(statements);
+    Set<Statement> set = new LinkedHashSet<>(statements);
     set.remove(head);
 
     for (Statement st : set) {
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
index bcef5fefb4600cde7795a1dd4306c48b15a9e26c..1a3b59d5bc797a9f3442cd9d31b4696d9383e4d7 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/SwitchStatement.java
@@ -77,7 +77,15 @@ public class SwitchStatement extends Statement {
 
     default_edge = head.getSuccessorEdges(Statement.STATEDGE_DIRECT_ALL).get(0);
 
-    for (Statement st : lstNodes) {
+    //We need to use set above in case we have multiple edges to the same node. But HashSets iterator is not ordered, so sort
+    List<Statement> sorted = new ArrayList<>(lstNodes);
+    Collections.sort(sorted, new Comparator<Statement>() {
+      @Override
+      public int compare(Statement o1, Statement o2) {
+        return o1.id - o2.id;
+      }
+    });
+    for (Statement st : sorted) {
       stats.addWithKey(st, st.id);
     }
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java
index 630028944d138b82dfbea559d0b8d87d81f3e024..cce407c66a2010c92450dd62473183964b90a3cf 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarVersionsProcessor.java
@@ -237,7 +237,15 @@ public class VarVersionsProcessor {
     Map<Integer, Integer> mapOriginalVarIndices = new HashMap<>();
 
     // map var-version pairs on new var indexes
-    for (VarVersionPair pair : new ArrayList<>(mapExprentMinTypes.keySet())) {
+    List<VarVersionPair> lst = new ArrayList<>(mapExprentMinTypes.keySet());
+    Collections.sort(lst, new Comparator<VarVersionPair>() {
+      public int compare(VarVersionPair o1, VarVersionPair o2) {
+        if (o1.var != o2.var) return o1.var - o2.var;
+        return o1.version - o2.version;
+      }
+    });
+
+    for (VarVersionPair pair : lst) {
 
       if (pair.version >= 0) {
         int newIndex = pair.version == 1 ? pair.var : counters.getCounterAndIncrement(CounterContainer.VAR_COUNTER);
diff --git a/testData/results/MoreAnnotations.dec b/testData/results/MoreAnnotations.dec
index 37302cc3db53fe0bbcfdab2e7a9653812a320235..069c0334a1df23c17159f8f199045438559b7687 100644
--- a/testData/results/MoreAnnotations.dec
+++ b/testData/results/MoreAnnotations.dec
@@ -34,8 +34,8 @@ public @interface MoreAnnotations {
    @MoreAnnotations(
       intArray = {1, 0, 2147483647, -2147483648},
       byteArray = {1, 0, 127, -128, -1},
-      floatArray = {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0, 1.0F / 0.0, -1.0F / 0.0},
-      doubleArray = {1.0D, 0.0D, 1.7976931348623157E308D, 4.9E-324D, 0.0D / 0.0, 1.0D / 0.0, -1.0D / 0.0},
+      floatArray = {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0F, 1.0F / 0.0F, -1.0F / 0.0F},
+      doubleArray = {1.0D, 0.0D, 1.7976931348623157E308D, 4.9E-324D, 0.0D / 0.0D, 1.0D / 0.0D, -1.0D / 0.0D},
       booleanArray = {true, false},
       shortArray = {1, 0, 32767, -32768, -1},
       longArray = {1L, 0L, 9223372036854775807L, -9223372036854775808L},
@@ -51,9 +51,9 @@ public @interface MoreAnnotations {
 
    byte byteValue() default 1;
 
-   float floatValue() default 1.0F / 0.0;
+   float floatValue() default 1.0F / 0.0F;
 
-   double doubleValue() default 0.0D / 0.0;
+   double doubleValue() default 0.0D / 0.0D;
 
    boolean booleanValue() default true;
 
@@ -75,9 +75,9 @@ public @interface MoreAnnotations {
 
    byte[] byteArray() default {1, 0, 127, -128, -1};
 
-   float[] floatArray() default {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0, 1.0F / 0.0, -1.0F / 0.0};
+   float[] floatArray() default {1.0F, 0.0F, 3.4028235E38F, 1.4E-45F, 0.0F / 0.0F, 1.0F / 0.0F, -1.0F / 0.0F};
 
-   double[] doubleArray() default {1.0D, 0.0D, 1.7976931348623157E308D, 4.9E-324D, 0.0D / 0.0, 1.0D / 0.0, -1.0D / 0.0};
+   double[] doubleArray() default {1.0D, 0.0D, 1.7976931348623157E308D, 4.9E-324D, 0.0D / 0.0D, 1.0D / 0.0D, -1.0D / 0.0D};
 
    boolean[] booleanArray() default {true, false};
 
@@ -95,13 +95,13 @@ public @interface MoreAnnotations {
 
    Class<? extends CharSequence>[] classArray() default {CharSequence.class, String.class, StringBuilder.class};
 
+   public @interface NestedAnnotation {
+      String value() default "MyString";
+   }
+
    public static enum TestEnum {
       FirstValue,
       SecondValue;
    }
-
-   public @interface NestedAnnotation {
-      String value() default "MyString";
-   }
 }
 
diff --git a/testData/results/TestAnonymousClass.dec b/testData/results/TestAnonymousClass.dec
index 924b7641e3454daf3ce738de750dfcfa587fa18d..14c92f960012ea63747096f9237fca7ee5e70ced 100644
--- a/testData/results/TestAnonymousClass.dec
+++ b/testData/results/TestAnonymousClass.dec
@@ -67,15 +67,8 @@ public abstract class TestAnonymousClass {
       boolean var1 = true;// 39
    }// 40
 
-   static class InnerRecursive {
-      TestAnonymousClass.InnerRecursive r;
-
-      public InnerRecursive(TestAnonymousClass.InnerRecursive var1) {
-         this.r = var1;// 105
-      }// 106
-
-      void foo() {
-      }// 110
+   interface I {
+      void foo() throws Exception;
    }
 
    private static class Inner {
@@ -87,8 +80,15 @@ public abstract class TestAnonymousClass {
       };
    }
 
-   interface I {
-      void foo() throws Exception;
+   static class InnerRecursive {
+      TestAnonymousClass.InnerRecursive r;
+
+      public InnerRecursive(TestAnonymousClass.InnerRecursive var1) {
+         this.r = var1;// 105
+      }// 106
+
+      void foo() {
+      }// 110
    }
 }
 
@@ -180,24 +180,24 @@ class 'pkg/TestAnonymousClass' {
    }
 }
 
+class 'pkg/TestAnonymousClass$Inner$1' {
+   method 'run ()V' {
+      0      76
+      1      76
+      2      77
+      3      77
+      4      78
+   }
+}
+
 class 'pkg/TestAnonymousClass$InnerRecursive' {
    method '<init> (Lpkg/TestAnonymousClass$InnerRecursive;)V' {
-      6      73
-      9      74
+      6      86
+      9      87
    }
 
    method 'foo ()V' {
-      0      77
-   }
-}
-
-class 'pkg/TestAnonymousClass$Inner$1' {
-   method 'run ()V' {
-      0      83
-      1      83
-      2      84
-      3      84
-      4      85
+      0      90
    }
 }
 
@@ -223,9 +223,9 @@ Lines mapping:
 53 <-> 18
 54 <-> 19
 55 <-> 20
-66 <-> 84
-67 <-> 85
-68 <-> 86
+66 <-> 77
+67 <-> 78
+68 <-> 79
 75 <-> 24
 76 <-> 25
 77 <-> 26
@@ -234,9 +234,9 @@ Lines mapping:
 91 <-> 37
 92 <-> 38
 93 <-> 39
-105 <-> 74
-106 <-> 75
-110 <-> 78
+105 <-> 87
+106 <-> 88
+110 <-> 91
 Not mapped:
 18
 104
diff --git a/testData/results/TestAnonymousClassConstructor.dec b/testData/results/TestAnonymousClassConstructor.dec
index 66960ce40f72703d3577549847d033f011007834..63abd4acbe8cf73eb9628724b632af1a9ca231a3 100644
--- a/testData/results/TestAnonymousClassConstructor.dec
+++ b/testData/results/TestAnonymousClassConstructor.dec
@@ -65,16 +65,16 @@ class TestAnonymousClassConstructor {
       System.out.println("n(): " + s);// 53
    }// 54
 
-   static class InnerStaticPublic {
-      public InnerStaticPublic(long a, int b) {
-         TestAnonymousClassConstructor.n(a + "+" + b);// 100
-      }// 101
+   class InnerPrivate {
+      private InnerPrivate(long a, int b) {
+         TestAnonymousClassConstructor.n(a + "+" + b);// 64
+      }// 65
    }
 
-   static class InnerStaticPublicString {
-      public InnerStaticPublicString(String s) {
-         TestAnonymousClassConstructor.n(s);// 94
-      }// 95
+   class InnerPrivateString {
+      private InnerPrivateString(String s) {
+         TestAnonymousClassConstructor.n(s);// 58
+      }// 59
    }
 
    class InnerPublic {
@@ -101,16 +101,16 @@ class TestAnonymousClassConstructor {
       }// 71
    }
 
-   class InnerPrivate {
-      private InnerPrivate(long a, int b) {
-         TestAnonymousClassConstructor.n(a + "+" + b);// 64
-      }// 65
+   static class InnerStaticPublic {
+      public InnerStaticPublic(long a, int b) {
+         TestAnonymousClassConstructor.n(a + "+" + b);// 100
+      }// 101
    }
 
-   class InnerPrivateString {
-      private InnerPrivateString(String s) {
-         TestAnonymousClassConstructor.n(s);// 58
-      }// 59
+   static class InnerStaticPublicString {
+      public InnerStaticPublicString(String s) {
+         TestAnonymousClassConstructor.n(s);// 94
+      }// 95
    }
 }
 
@@ -190,19 +190,19 @@ class 'pkg/TestAnonymousClassConstructor' {
    }
 }
 
-class 'pkg/TestAnonymousClassConstructor$InnerStaticPublic' {
-   method '<init> (JI)V' {
-      f      69
-      18      69
-      1b      69
-      1e      70
+class 'pkg/TestAnonymousClassConstructor$InnerPrivate' {
+   method '<init> (Lpkg/TestAnonymousClassConstructor;JI)V' {
+      14      69
+      1e      69
+      21      69
+      24      70
    }
 }
 
-class 'pkg/TestAnonymousClassConstructor$InnerStaticPublicString' {
-   method '<init> (Ljava/lang/String;)V' {
-      5      75
-      8      76
+class 'pkg/TestAnonymousClassConstructor$InnerPrivateString' {
+   method '<init> (Lpkg/TestAnonymousClassConstructor;Ljava/lang/String;)V' {
+      a      75
+      d      76
    }
 }
 
@@ -238,19 +238,19 @@ class 'pkg/TestAnonymousClassConstructor$InnerStaticPrivateString' {
    }
 }
 
-class 'pkg/TestAnonymousClassConstructor$InnerPrivate' {
-   method '<init> (Lpkg/TestAnonymousClassConstructor;JI)V' {
-      14      105
-      1e      105
-      21      105
-      24      106
+class 'pkg/TestAnonymousClassConstructor$InnerStaticPublic' {
+   method '<init> (JI)V' {
+      f      105
+      18      105
+      1b      105
+      1e      106
    }
 }
 
-class 'pkg/TestAnonymousClassConstructor$InnerPrivateString' {
-   method '<init> (Lpkg/TestAnonymousClassConstructor;Ljava/lang/String;)V' {
-      a      111
-      d      112
+class 'pkg/TestAnonymousClassConstructor$InnerStaticPublicString' {
+   method '<init> (Ljava/lang/String;)V' {
+      5      111
+      8      112
    }
 }
 
@@ -281,10 +281,10 @@ Lines mapping:
 50 <-> 62
 53 <-> 65
 54 <-> 66
-58 <-> 112
-59 <-> 113
-64 <-> 106
-65 <-> 107
+58 <-> 76
+59 <-> 77
+64 <-> 70
+65 <-> 71
 70 <-> 100
 71 <-> 101
 76 <-> 94
@@ -293,10 +293,10 @@ Lines mapping:
 83 <-> 89
 88 <-> 82
 89 <-> 83
-94 <-> 76
-95 <-> 77
-100 <-> 70
-101 <-> 71
+94 <-> 112
+95 <-> 113
+100 <-> 106
+101 <-> 107
 Not mapped:
 57
 63
diff --git a/testData/results/TestClassSimpleBytecodeMapping.dec b/testData/results/TestClassSimpleBytecodeMapping.dec
index 8883fab6ffd4b5f8b8b656b96e9a5c45d0e1bfb9..d5f7070f5b6618b11ea075941af29d4278059b59 100644
--- a/testData/results/TestClassSimpleBytecodeMapping.dec
+++ b/testData/results/TestClassSimpleBytecodeMapping.dec
@@ -33,17 +33,17 @@ public class TestClassSimpleBytecodeMapping {
       var1.run();// 49
    }// 50
 
-   public class InnerClass2 {
-      public void print() {
-         System.out.println("Inner2");// 54
-      }// 55
-   }
-
    public class InnerClass {
       public void print() {
          System.out.println("Inner");// 44
       }// 45
    }
+
+   public class InnerClass2 {
+      public void print() {
+         System.out.println("Inner2");// 54
+      }// 55
+   }
 }
 
 class 'pkg/TestClassSimpleBytecodeMapping$1' {
@@ -96,7 +96,7 @@ class 'pkg/TestClassSimpleBytecodeMapping' {
    }
 }
 
-class 'pkg/TestClassSimpleBytecodeMapping$InnerClass2' {
+class 'pkg/TestClassSimpleBytecodeMapping$InnerClass' {
    method 'print ()V' {
       0      37
       3      37
@@ -105,7 +105,7 @@ class 'pkg/TestClassSimpleBytecodeMapping$InnerClass2' {
    }
 }
 
-class 'pkg/TestClassSimpleBytecodeMapping$InnerClass' {
+class 'pkg/TestClassSimpleBytecodeMapping$InnerClass2' {
    method 'print ()V' {
       0      43
       3      43
@@ -130,11 +130,11 @@ Lines mapping:
 36 <-> 25
 38 <-> 27
 40 <-> 30
-44 <-> 44
-45 <-> 45
+44 <-> 38
+45 <-> 39
 49 <-> 33
 50 <-> 34
-54 <-> 38
-55 <-> 39
+54 <-> 44
+55 <-> 45
 Not mapped:
 39
diff --git a/testData/results/TestConstants.dec b/testData/results/TestConstants.dec
index 28df2c294ca1c0818ffad43052919c61c262c16a..1170f1a5876121e55bc5c58a2d10afeac8d1527f 100644
--- a/testData/results/TestConstants.dec
+++ b/testData/results/TestConstants.dec
@@ -16,14 +16,14 @@ public class TestConstants {
    static final int IMax = 2147483647;
    static final long LMin = -9223372036854775808L;
    static final long LMax = 9223372036854775807L;
-   static final float FNan = 0.0F / 0.0;
-   static final float FNeg = -1.0F / 0.0;
-   static final float FPos = 1.0F / 0.0;
+   static final float FNan = 0.0F / 0.0F;
+   static final float FNeg = -1.0F / 0.0F;
+   static final float FPos = 1.0F / 0.0F;
    static final float FMin = 1.4E-45F;
    static final float FMax = 3.4028235E38F;
-   static final double DNan = 0.0D / 0.0;
-   static final double DNeg = -1.0D / 0.0;
-   static final double DPos = 1.0D / 0.0;
+   static final double DNan = 0.0D / 0.0D;
+   static final double DNeg = -1.0D / 0.0D;
+   static final double DPos = 1.0D / 0.0D;
    static final double DMin = 4.9E-324D;
    static final double DMax = 1.7976931348623157E308D;
 
diff --git a/testData/results/TestExtendingSubclass.dec b/testData/results/TestExtendingSubclass.dec
index 5e13985808328287c750d776eee29041bec8e3fe..2caf74011a7beee7fd2a9fdebe1873be625a8f1a 100644
--- a/testData/results/TestExtendingSubclass.dec
+++ b/testData/results/TestExtendingSubclass.dec
@@ -1,35 +1,35 @@
 package pkg;
 
 public class TestExtendingSubclass {
+   class Subclass1 {
+      Subclass1(String name) {
+      }// 9
+   }
+
    class Subclass2 extends TestExtendingSubclass.Subclass1 {
       Subclass2(String name) {
          super(name);// 14
       }// 15
    }
-
-   class Subclass1 {
-      Subclass1(String name) {
-      }// 9
-   }
 }
 
-class 'pkg/TestExtendingSubclass$Subclass2' {
+class 'pkg/TestExtendingSubclass$Subclass1' {
    method '<init> (Lpkg/TestExtendingSubclass;Ljava/lang/String;)V' {
-      8      5
-      b      6
+      9      5
    }
 }
 
-class 'pkg/TestExtendingSubclass$Subclass1' {
+class 'pkg/TestExtendingSubclass$Subclass2' {
    method '<init> (Lpkg/TestExtendingSubclass;Ljava/lang/String;)V' {
-      9      11
+      8      10
+      b      11
    }
 }
 
 Lines mapping:
-9 <-> 12
-14 <-> 6
-15 <-> 7
+9 <-> 6
+14 <-> 11
+15 <-> 12
 Not mapped:
 8
 13
diff --git a/testData/results/TestInnerLocal.dec b/testData/results/TestInnerLocal.dec
index 6ca3a7e1053087d91543ce588eb81e19c9f3432d..e5aba7da20b0b57a4c796a36c24960f38c6eac31 100644
--- a/testData/results/TestInnerLocal.dec
+++ b/testData/results/TestInnerLocal.dec
@@ -28,6 +28,14 @@ public class TestInnerLocal {
       new TestInnerLocal.Inner1Static.Inner2Static("test");// 40
    }// 41
 
+   class Inner1 {
+      final String x;
+
+      public Inner1(String var2) {
+         this.x = var2;// 46
+      }// 47
+   }
+
    static class Inner1Static {
       final String x;
 
@@ -43,14 +51,6 @@ public class TestInnerLocal {
          }// 60
       }
    }
-
-   class Inner1 {
-      final String x;
-
-      public Inner1(String var2) {
-         this.x = var2;// 46
-      }// 47
-   }
 }
 
 class 'TestInnerLocal$1Inner' {
@@ -84,24 +84,24 @@ class 'TestInnerLocal$2Inner' {
    }
 }
 
-class 'TestInnerLocal$Inner1Static' {
-   method '<init> (Ljava/lang/String;)V' {
-      6      34
-      9      35
+class 'TestInnerLocal$Inner1' {
+   method '<init> (LTestInnerLocal;Ljava/lang/String;)V' {
+      b      34
+      e      35
    }
 }
 
-class 'TestInnerLocal$Inner1Static$Inner2Static' {
+class 'TestInnerLocal$Inner1Static' {
    method '<init> (Ljava/lang/String;)V' {
-      6      41
-      9      42
+      6      42
+      9      43
    }
 }
 
-class 'TestInnerLocal$Inner1' {
-   method '<init> (LTestInnerLocal;Ljava/lang/String;)V' {
-      b      50
-      e      51
+class 'TestInnerLocal$Inner1Static$Inner2Static' {
+   method '<init> (Ljava/lang/String;)V' {
+      6      49
+      9      50
    }
 }
 
@@ -119,12 +119,12 @@ Lines mapping:
 39 <-> 27
 40 <-> 28
 41 <-> 29
-46 <-> 51
-47 <-> 52
-53 <-> 35
-54 <-> 36
-59 <-> 42
-60 <-> 43
+46 <-> 35
+47 <-> 36
+53 <-> 43
+54 <-> 44
+59 <-> 50
+60 <-> 51
 Not mapped:
 21
 33
diff --git a/testData/results/TestInnerLocalPkg.dec b/testData/results/TestInnerLocalPkg.dec
index 7cafa415f9b6212b593d0c0940cc16c277cf5e2f..7ddb0ce6ad8adf326a51e145f419e23eed8779dd 100644
--- a/testData/results/TestInnerLocalPkg.dec
+++ b/testData/results/TestInnerLocalPkg.dec
@@ -30,6 +30,14 @@ public class TestInnerLocalPkg {
       new TestInnerLocalPkg.Inner1Static.Inner2Static("test");// 42
    }// 43
 
+   class Inner1 {
+      final String x;
+
+      public Inner1(String var2) {
+         this.x = var2;// 48
+      }// 49
+   }
+
    static class Inner1Static {
       final String x;
 
@@ -45,14 +53,6 @@ public class TestInnerLocalPkg {
          }// 62
       }
    }
-
-   class Inner1 {
-      final String x;
-
-      public Inner1(String var2) {
-         this.x = var2;// 48
-      }// 49
-   }
 }
 
 class 'pkg/TestInnerLocalPkg$1Inner' {
@@ -86,24 +86,24 @@ class 'pkg/TestInnerLocalPkg$2Inner' {
    }
 }
 
-class 'pkg/TestInnerLocalPkg$Inner1Static' {
-   method '<init> (Ljava/lang/String;)V' {
-      6      36
-      9      37
+class 'pkg/TestInnerLocalPkg$Inner1' {
+   method '<init> (Lpkg/TestInnerLocalPkg;Ljava/lang/String;)V' {
+      b      36
+      e      37
    }
 }
 
-class 'pkg/TestInnerLocalPkg$Inner1Static$Inner2Static' {
+class 'pkg/TestInnerLocalPkg$Inner1Static' {
    method '<init> (Ljava/lang/String;)V' {
-      6      43
-      9      44
+      6      44
+      9      45
    }
 }
 
-class 'pkg/TestInnerLocalPkg$Inner1' {
-   method '<init> (Lpkg/TestInnerLocalPkg;Ljava/lang/String;)V' {
-      b      52
-      e      53
+class 'pkg/TestInnerLocalPkg$Inner1Static$Inner2Static' {
+   method '<init> (Ljava/lang/String;)V' {
+      6      51
+      9      52
    }
 }
 
@@ -121,12 +121,12 @@ Lines mapping:
 41 <-> 29
 42 <-> 30
 43 <-> 31
-48 <-> 53
-49 <-> 54
-55 <-> 37
-56 <-> 38
-61 <-> 44
-62 <-> 45
+48 <-> 37
+49 <-> 38
+55 <-> 45
+56 <-> 46
+61 <-> 52
+62 <-> 53
 Not mapped:
 23
 35
diff --git a/testData/results/TestInnerSignature.dec b/testData/results/TestInnerSignature.dec
index 3087a40dc63251ee1444ef4924050413f39221d5..406e1f41d8f0a084a986f683bf7ecb3b44c37429 100644
--- a/testData/results/TestInnerSignature.dec
+++ b/testData/results/TestInnerSignature.dec
@@ -9,18 +9,6 @@ public class TestInnerSignature<A, B, C> {
       this.c = var3;// 25
    }// 26
 
-   public static class InnerStatic<A, B, C> {
-      A a;
-      B b;
-      C c;
-
-      public InnerStatic(A var1, B var2, C var3) {
-         this.a = var1;// 46
-         this.b = var2;// 47
-         this.c = var3;// 48
-      }// 49
-   }
-
    public class Inner {
       A a;
       B b;
@@ -32,6 +20,18 @@ public class TestInnerSignature<A, B, C> {
          this.c = var4;// 36
       }// 37
    }
+
+   public static class InnerStatic<A, B, C> {
+      A a;
+      B b;
+      C c;
+
+      public InnerStatic(A var1, B var2, C var3) {
+         this.a = var1;// 46
+         this.b = var2;// 47
+         this.c = var3;// 48
+      }// 49
+   }
 }
 
 class 'TestInnerSignature' {
@@ -43,21 +43,21 @@ class 'TestInnerSignature' {
    }
 }
 
-class 'TestInnerSignature$InnerStatic' {
-   method '<init> (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
-      6      17
-      b      18
-      10      19
-      13      20
+class 'TestInnerSignature$Inner' {
+   method '<init> (LTestInnerSignature;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
+      b      17
+      10      18
+      16      19
+      19      20
    }
 }
 
-class 'TestInnerSignature$Inner' {
-   method '<init> (LTestInnerSignature;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
-      b      29
-      10      30
-      16      31
-      19      32
+class 'TestInnerSignature$InnerStatic' {
+   method '<init> (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' {
+      6      29
+      b      30
+      10      31
+      13      32
    }
 }
 
@@ -66,14 +66,14 @@ Lines mapping:
 24 <-> 8
 25 <-> 9
 26 <-> 10
-34 <-> 30
-35 <-> 31
-36 <-> 32
-37 <-> 33
-46 <-> 18
-47 <-> 19
-48 <-> 20
-49 <-> 21
+34 <-> 18
+35 <-> 19
+36 <-> 20
+37 <-> 21
+46 <-> 30
+47 <-> 31
+48 <-> 32
+49 <-> 33
 Not mapped:
 22
 33
diff --git a/testData/results/TestMethodParameters.dec b/testData/results/TestMethodParameters.dec
index 21f0f129d1bc260e2dbc7ce77f07ece57711bf75..af7ce865f5d946980010ee02c3e5be384a041064 100644
--- a/testData/results/TestMethodParameters.dec
+++ b/testData/results/TestMethodParameters.dec
@@ -21,6 +21,14 @@ public class TestMethodParameters {
 
    }// 39
 
+   class C1 {
+      C1(@Deprecated int var2) {
+      }// 24
+
+      void m(@Deprecated int var1) {
+      }// 25
+   }
+
    static class C2 {
       C2(@Deprecated int var1) {
       }// 29
@@ -31,14 +39,6 @@ public class TestMethodParameters {
       static void m2(@Deprecated int var0) {
       }// 31
    }
-
-   class C1 {
-      C1(@Deprecated int var2) {
-      }// 24
-
-      void m(@Deprecated int var1) {
-      }// 25
-   }
 }
 
 class 'pkg/TestMethodParameters' {
@@ -69,26 +69,26 @@ class 'pkg/TestMethodParameters$1Local' {
    }
 }
 
-class 'pkg/TestMethodParameters$C2' {
-   method '<init> (I)V' {
-      4      25
+class 'pkg/TestMethodParameters$C1' {
+   method '<init> (Lpkg/TestMethodParameters;I)V' {
+      9      25
    }
 
-   method 'm1 (I)V' {
+   method 'm (I)V' {
       0      28
    }
+}
 
-   method 'm2 (I)V' {
-      0      31
+class 'pkg/TestMethodParameters$C2' {
+   method '<init> (I)V' {
+      4      33
    }
-}
 
-class 'pkg/TestMethodParameters$C1' {
-   method '<init> (Lpkg/TestMethodParameters;I)V' {
-      9      36
+   method 'm1 (I)V' {
+      0      36
    }
 
-   method 'm (I)V' {
+   method 'm2 (I)V' {
       0      39
    }
 }
@@ -97,11 +97,11 @@ Lines mapping:
 19 <-> 5
 20 <-> 8
 21 <-> 11
-24 <-> 37
-25 <-> 40
-29 <-> 26
-30 <-> 29
-31 <-> 32
+24 <-> 26
+25 <-> 29
+29 <-> 34
+30 <-> 37
+31 <-> 40
 36 <-> 16
 37 <-> 19
 39 <-> 22
diff --git a/testData/results/TestSwitchOnEnum.dec b/testData/results/TestSwitchOnEnum.dec
index b6984c399ceff5434ddf72837649389341a00ea5..34064819cc6a520a13bc3fd718a046861414ae4c 100644
--- a/testData/results/TestSwitchOnEnum.dec
+++ b/testData/results/TestSwitchOnEnum.dec
@@ -36,15 +36,15 @@ public class TestSwitchOnEnum {
 
       }// 46
 
-      static enum B {
-         B1,
-         B2;
-      }
-
       static enum A {
          A1,
          A2;
       }
+
+      static enum B {
+         B1,
+         B2;
+      }
    }
 }
 
