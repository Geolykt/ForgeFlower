From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Thu, 11 May 2017 03:24:33 -0700
Subject: [PATCH] Fix primitive unboxing causing invocations of wrong
 overloaded functions.


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index b76d223b38e444a0f99478b3f265382126f28df5..b423fb468a9b0bfc00026904299cded8715730c7 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -71,6 +71,7 @@ public class InvocationExprent extends Exprent {
   private List<Exprent> lstParameters = new ArrayList<>();
   private List<PooledConstant> bootstrapArguments;
   private List<VarType> genericArgs = new ArrayList<>();
+  private boolean forceBoxing = false;
 
   public InvocationExprent() {
     super(EXPRENT_INVOCATION);
@@ -269,7 +270,7 @@ public class InvocationExprent extends Exprent {
     tracer.addMapping(bytecode);
 
     if (isStatic) {
-      if (isBoxingCall()) {
+      if (isBoxingCall() && !forceBoxing) {
         // process general "boxing" calls, e.g. 'Object[] data = { true }' or 'Byte b = 123'
         // here 'byte' and 'short' values do not need an explicit narrowing type cast
         ExprProcessor.getCastedExprent(lstParameters.get(0), descriptor.params[0], buf, indent, false, false, false, tracer);
@@ -427,9 +428,66 @@ public class InvocationExprent extends Exprent {
       }
     }
 
-    boolean firstParameter = true;
     int start = isEnum ? 2 : 0;
-    for (int i = start; i < lstParameters.size(); i++) {
+    List<Exprent> parameters = new ArrayList<>(lstParameters);
+    VarType[] types = Arrays.copyOf(descriptor.params, descriptor.params.length);
+    for (int i = start; i < parameters.size(); i++) {
+      Exprent par = parameters.get(i);
+
+      // "unbox" invocation parameters, e.g. 'byteSet.add((byte)123)' or 'new ShortContainer((short)813)'
+      //However, we must make sure we don't accidentally make the call ambiguous.
+      //An example being List<Integer>, remove(Integer.valueOf(1)) and remove(1) are different functions
+      if (par.type == Exprent.EXPRENT_INVOCATION && ((InvocationExprent)par).isBoxingCall()) {
+        InvocationExprent inv = (InvocationExprent)par;
+        if (!setAmbiguousParameters.get(i)) {
+          inv.forceBoxing = true;
+          continue;
+        }
+
+        Exprent value = inv.lstParameters.get(0);
+        types[i] = value.getExprType(); //Infer?
+        //Unboxing in this case is lossy, so we need to explicitly set the type
+        if (types[i] == VarType.VARTYPE_BYTECHAR || types[i] == VarType.VARTYPE_SHORTCHAR) {
+          types[i] = "java/lang/Short".equals(inv.classname) ? VarType.VARTYPE_SHORT :
+                     "java/lang/Byte".equals(inv.classname) ? VarType.VARTYPE_BYTE :
+                     VarType.VARTYPE_CHAR;
+        }
+
+        int count = 0;
+        StructClass stClass = DecompilerContext.getStructContext().getClass(classname);
+        if (stClass != null) {
+          nextMethod:
+          for (StructMethod mt : stClass.getMethods()) {
+            if (name.equals(mt.getName())) {
+              MethodDescriptor md = MethodDescriptor.parseDescriptor(mt.getDescriptor());
+              if (md.params.length == descriptor.params.length) {
+                for (int x = 0; x < md.params.length; x++) {
+                  if (md.params[x].typeFamily != descriptor.params[x].typeFamily &&
+                      md.params[x].typeFamily != types[x].typeFamily) {
+                    continue nextMethod;
+                  }
+                }
+                count++;
+              }
+            }
+          }
+        }
+
+        if (count != matches.size()) { //We become more ambiguous? Lets keep the explicit boxing
+          types[i] = descriptor.params[i];
+          inv.forceBoxing = true;
+        }
+        else {
+          value.addBytecodeOffsets(inv.bytecode); //Keep the bytecode for matching/debug
+          parameters.set(i, value);
+        }
+      }
+
+    }
+
+
+    boolean firstParameter = true;
+    for (int i = start; i < parameters.size(); i++) {
       if (sigFields == null || sigFields.get(i) == null) {
         TextBuffer buff = new TextBuffer();
         boolean ambiguous = setAmbiguousParameters.get(i);
@@ -462,13 +520,9 @@ public class InvocationExprent extends Exprent {
         }
         */
 
-        Exprent param = lstParameters.get(i);
-        // "unbox" invocation parameters, e.g. 'byteSet.add((byte)123)' or 'new ShortContainer((short)813)'
-        if (param.type == Exprent.EXPRENT_INVOCATION && ((InvocationExprent)param).isBoxingCall()) {
-          param = ((InvocationExprent)param).lstParameters.get(0);
-        }
+        Exprent param = parameters.get(i);
         // 'byte' and 'short' literals need an explicit narrowing type cast when used as a parameter
-        ExprProcessor.getCastedExprent(param, descriptor.params[i], buff, indent, true, ambiguous, true, tracer);
+        ExprProcessor.getCastedExprent(param, types[i], buff, indent, true, ambiguous, true, tracer);
 
         // the last "new Object[0]" in the vararg call is not printed
         if (buff.length() > 0) {
@@ -512,7 +566,7 @@ public class InvocationExprent extends Exprent {
       // special handling for ambiguous types
       if (lstParameters.get(0).type == Exprent.EXPRENT_CONST) {
         if (paramType == CodeConstants.TYPE_BYTECHAR || paramType == CodeConstants.TYPE_SHORTCHAR) {
-          if (classname.equals("java/lang/Character")) {
+          if (classname.equals("java/lang/Character") || classname.equals("java/lang/Short")) {
             return true;
           }
         }
diff --git a/testData/classes/pkg/TestPrimitives.class b/testData/classes/pkg/TestPrimitives.class
index be15ee5f11867ff023c89f26814bcbc4985d2194..e4b847e54ace05749e45433aa31fd64ff27b65cf 100644
GIT binary patch
literal 3711
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

literal 3197
zcmaKu`%@cL6vw}tENoa7NFY2cRj4gCP1B}UR9f0Xfl@&VXet$2A4^zZX_CcdLv5=T
z-><5z^;K)@V>;t6PG|IoG^3+`fd7SmgTFfJxpz043vJ4f%{k}Z^SS4od+y!*`R}iP
z0O-aKDk6AZ#Y1?3JziuFojqo&Xq^3>XIfhByS{vrNpsbGf8UCp`|Ic}rWx!pUxNiK
zhF~gKV)|(n8DyE1Q?U&ela^Jy1e-}KDjeihtm2G{mvJ_Pb0N0KD|j`8*Hm1<nu^!)
zMhI`JcnfbUc!yEmRq&pK>H}uZbPh=f#&%3ekO!?fLqfxtnKQ=o*;&IruFq!3(l}<N
z^~{uRn@snNva@KeNQjOtpI%5FH&&cU+svAdxoWKRN(e36X3jaB$w<(+IAB>BL(kDF
zu^G0QG)tcu2{rEMS%=n<V*`9>K!VE6sYT0nm_5bqw49VGu}5-zWQ32HG%`|xjaj(`
z<}}KOC<1A;1RTy-I(Hl9WAijNETNV!He}^_wsLHU56;oxP>DIXsN0M=$cNH2G)T+^
z!}0T?8d5q6Gx20dr#wQWds&cyg0Ch651mwsxQ;J9uG_YC#-J5z(^hW9vGZxiqV<%t
zm0i|tUYbFM584J5p)Td<>C?ybWp69gl$E#B#<0mYt7-jS>|WAWbq(7Q(~!g-4UeE(
z!((_{!+!K?ID|e80~pjWjH4Px@uY(HHGF^%CDeD#COW(3N*@Vf21{o2+(L3<cF9OP
z8pbi9;G%|)@UezTJjJ9>G(3%zf=f)ftl>DGQSd2Kt|<6S!{_)y!Iv7o!c_@@F6x9p
z*PMc{*^FyUnOE=)Q?4tx!M?v`#<YU(nDRXZR*r)eo2A!HZF*-Xt_wMJcEvHWR75LJ
zJ<vSHA*Pj_WUZQVY(vjd=SBo}sb`f{J(D*ks9jp9dtFCf1#kDst%-V99H6ks+E9jh
zT@a;S7Ups5`c<hrj0J;sza=&zPW9|GS=a^&+hpBdJ#X1r*4q1GBAt)+o)k>(zV(V=
zm%(zlOGT&&d5dP~=r-Sl&CY|c9q!p{qO&Kg$&BlZ;hn>1Y*?Jft?TnE9m-}plmgK;
z`yunaU`JF>JFIeTbWVlY{zxyj(486KH*o|KI~DZYL3)zDCHk(4--h%v2?50ES<Q_>
z>?B!pCm?}cq)FKAI~ToqOL4h?Ks<cDfM7f#Nd?GUsftHYT|g+_SW|#XN^Jpk@$gIm
z^}nE@F|7QK$aFAXKw}Y2scD&{Xc5h+=_-<1ifBzuSCiCM#C@qEHWkobjxY|D$5{mh
zwFsdRHE1JS2Wedta{_hPiw2ko3t24rS<sz8xv&yUP!<9DZe=lTmU&F=ETD}`s(e}#
zS`g*P7T3)~5&#d=lB}L|*W3+$zYlM&0B<FDTSfSz98P!Gz2U7D;Ozw8TmjyLeH>1A
z<GtZ`?u1*G4uW@9fFHm?4yQZUhbst{YVMV#qlgD8M81{a+bY2OahSvDF8ATWhIY6$
z-&#ax1^9M?$11>waD>C@9pS@;$UXS>BDPe3?<9Dl0{jV#a5%kte7F$#gMPPctpHCF
zd`|`V7>;o`y{9~Qg6nj`gFjK_#dF@x8SXg`_$P#3YM$pV&odZa+vwUOxCVV!dJB54
zyFFJqvWAVm2LxZ)_obKS9m~cyy7mjM<z=V*o9PJU$F8-eIJ-YCvwMjNSLkLcUm^9p
z1&8S3I6~LQuz+mxqdDOtduTR8s=r~|w0s*~C(0!E2#gSERG_FHC4gr!?dBx)QDCg`
zueAqmLXm%j96Z>5!<Xc;F&q-)8bMYCSrg<sLGBb}U65x4`9fKa;6Gp4%xWFvZ-M=&
zC;1rNsN-m+KI)_&Itl8E9{QOxL|Z&bzi>{`b}eFxevO~N8YOy>QoV{9UWQILRj&+`
pG~BMN#U+}tmr8Mx_z7&P>6iXNNa~kJP%Hn}_Or|N6!`@3-2apXB8mV2

diff --git a/testData/results/TestPrimitives.dec b/testData/results/TestPrimitives.dec
index 52f2cdf01c873c3bdf2cdf53a0cf29c99a9dd154..c85c4e7fbfe7eea981a97d5bd48277a212feeb2e 100644
--- a/testData/results/TestPrimitives.dec
+++ b/testData/results/TestPrimitives.dec
@@ -1,480 +1,549 @@
 package pkg;
 
+import java.util.List;
+
 public class TestPrimitives {
+   private void testInvalidUnboxing() {
+      List<Integer> lst = null;// 7
+      lst.remove(Integer.valueOf(0));// 8
+      this.genericBoxing((short)0);// 9
+   }// 10
+
+   private <T> void genericBoxing(T value) {
+   }// 12
+
    public void printAll() {
-      this.printBoolean(true);// 6
-      this.printByte((byte)123);// 7
-      this.printShort((short)257);// 8
-      this.printInt(123);// 9
-      this.printLong(123L);// 10
-      this.printFloat(1.23F);// 11
-      this.printDouble(1.23D);// 12
-      this.printChar('Z');// 13
-      System.out.println(String.format("%b, %d, %d, %d", this.getBoolean(), this.getByte(), this.getShort(), this.getInt()));// 15
-   }// 16
+      this.printBoolean(true);// 15
+      this.printByte((byte)123);// 16
+      this.printShort((short)257);// 17
+      this.printInt(123);// 18
+      this.printLong(123L);// 19
+      this.printFloat(1.23F);// 20
+      this.printDouble(1.23D);// 21
+      this.printChar('Z');// 22
+      System.out.println(String.format("%b, %d, %d, %d", this.getBoolean(), this.getByte(), this.getShort(), this.getInt()));// 24
+   }// 25
 
    public void printBoolean(boolean b) {
-      System.out.println(String.format("%b", b));// 19
-   }// 20
+      System.out.println(String.format("%b", b));// 28
+   }// 29
 
    public void printByte(byte b) {
-      System.out.println(String.format("%d", b));// 23
-   }// 24
+      System.out.println(String.format("%d", b));// 32
+   }// 33
 
    public void printShort(short s) {
-      System.out.println(String.format("%d", s));// 27
-   }// 28
+      System.out.println(String.format("%d", s));// 36
+   }// 37
 
    public void printInt(int i) {
-      System.out.println(String.format("%d", i));// 31
-   }// 32
+      System.out.println(String.format("%d", i));// 40
+   }// 41
 
    public void printLong(long l) {
-      System.out.println(String.format("%d", l));// 35
-   }// 36
+      System.out.println(String.format("%d", l));// 44
+   }// 45
 
    public void printFloat(float f) {
-      System.out.println(String.format("%f", f));// 39
-   }// 40
+      System.out.println(String.format("%f", f));// 48
+   }// 49
 
    public void printDouble(double d) {
-      System.out.println(String.format("%f", d));// 43
-   }// 44
+      System.out.println(String.format("%f", d));// 52
+   }// 53
 
    public void printChar(char c) {
-      System.out.println(String.format("%c", c));// 47
-   }// 48
+      System.out.println(String.format("%c", c));// 56
+   }// 57
 
    public boolean getBoolean() {
-      return false;// 52
+      return false;// 61
    }
 
    public byte getByte() {
-      return -128;// 56
+      return -128;// 65
    }
 
    public short getShort() {
-      return -32768;// 60
+      return -32768;// 69
    }
 
    public int getInt() {
-      return 42;// 64
+      return 42;// 73
    }
 
    public void printNarrowed() {
-      this.printByte((byte)this.getInt());// 68
-      this.printShort((short)this.getInt());// 69
-   }// 70
+      this.printByte((byte)this.getInt());// 77
+      this.printShort((short)this.getInt());// 78
+   }// 79
 
    public void constructor() {
-      new Byte((byte)1);// 73
-   }// 74
+      new Byte((byte)1);// 82
+   }// 83
 
    private boolean compare(char c) {
-      boolean res = c > -1;// 77
-      res = c > 0;// 78
-      res = c > 1;// 79
-      res = c > '\b';// 80
-      res = c > '\t';// 81
-      res = c > '\n';// 82
-      res = c > '\f';// 83
-      res = c > '\r';// 84
-      res = c > ' ';// 85
-      res = c > 'a';// 86
-      res = c > 'Z';// 87
-      res = c > 127;// 88
-      res = c > 255;// 89
-      return res;// 90
+      boolean res = c > -1;// 86
+      res = c > 0;// 87
+      res = c > 1;// 88
+      res = c > '\b';// 89
+      res = c > '\t';// 90
+      res = c > '\n';// 91
+      res = c > '\f';// 92
+      res = c > '\r';// 93
+      res = c > ' ';// 94
+      res = c > 'a';// 95
+      res = c > 'Z';// 96
+      res = c > 127;// 97
+      res = c > 255;// 98
+      return res;// 99
    }
 }
 
 class 'pkg/TestPrimitives' {
+   method 'testInvalidUnboxing ()V' {
+      0      6
+      1      6
+      2      7
+      3      7
+      4      7
+      5      7
+      6      7
+      7      7
+      8      7
+      9      7
+      a      7
+      b      7
+      d      8
+      e      8
+      f      8
+      10      8
+      11      8
+      12      8
+      13      8
+      14      8
+      15      9
+   }
+
+   method 'genericBoxing (Ljava/lang/Object;)V' {
+      0      12
+   }
+
    method 'printAll ()V' {
-      0      4
-      1      4
-      2      4
-      3      4
-      4      4
-      5      5
-      6      5
-      7      5
-      8      5
-      9      5
-      a      5
-      b      6
-      c      6
-      d      6
-      e      6
-      f      6
-      10      6
-      11      6
-      12      7
-      13      7
-      14      7
-      15      7
-      16      7
-      17      7
-      18      8
-      19      8
-      1a      8
-      1b      8
-      1c      8
-      1d      8
-      1e      8
-      1f      9
-      20      9
-      21      9
-      22      9
-      23      9
-      24      9
-      25      10
-      26      10
-      27      10
-      28      10
-      29      10
-      2a      10
-      2b      10
-      2c      11
-      2d      11
-      2e      11
-      2f      11
-      30      11
-      31      11
-      32      12
-      33      12
-      34      12
-      35      12
-      36      12
-      3d      12
-      3e      12
-      3f      12
-      40      12
-      41      12
-      42      12
-      43      12
-      47      12
-      48      12
-      49      12
-      4a      12
-      4b      12
-      4c      12
-      4d      12
-      51      12
-      52      12
-      53      12
-      54      12
-      55      12
-      56      12
-      57      12
-      5b      12
-      5c      12
-      5d      12
-      5e      12
-      5f      12
-      60      12
-      61      12
-      63      12
-      64      12
-      65      12
-      66      12
-      67      12
-      68      12
-      69      13
+      0      15
+      1      15
+      2      15
+      3      15
+      4      15
+      5      16
+      6      16
+      7      16
+      8      16
+      9      16
+      a      16
+      b      17
+      c      17
+      d      17
+      e      17
+      f      17
+      10      17
+      11      17
+      12      18
+      13      18
+      14      18
+      15      18
+      16      18
+      17      18
+      18      19
+      19      19
+      1a      19
+      1b      19
+      1c      19
+      1d      19
+      1e      19
+      1f      20
+      20      20
+      21      20
+      22      20
+      23      20
+      24      20
+      25      21
+      26      21
+      27      21
+      28      21
+      29      21
+      2a      21
+      2b      21
+      2c      22
+      2d      22
+      2e      22
+      2f      22
+      30      22
+      31      22
+      32      23
+      33      23
+      34      23
+      35      23
+      36      23
+      3d      23
+      3e      23
+      3f      23
+      40      23
+      41      23
+      42      23
+      43      23
+      47      23
+      48      23
+      49      23
+      4a      23
+      4b      23
+      4c      23
+      4d      23
+      51      23
+      52      23
+      53      23
+      54      23
+      55      23
+      56      23
+      57      23
+      5b      23
+      5c      23
+      5d      23
+      5e      23
+      5f      23
+      60      23
+      61      23
+      63      23
+      64      23
+      65      23
+      66      23
+      67      23
+      68      23
+      69      24
    }
 
    method 'printBoolean (Z)V' {
-      0      16
-      1      16
-      2      16
-      3      16
-      4      16
-      b      16
-      c      16
-      d      16
-      e      16
-      10      16
-      11      16
-      12      16
-      13      16
-      14      16
-      15      16
-      16      17
+      0      27
+      1      27
+      2      27
+      3      27
+      4      27
+      b      27
+      c      27
+      d      27
+      e      27
+      10      27
+      11      27
+      12      27
+      13      27
+      14      27
+      15      27
+      16      28
    }
 
    method 'printByte (B)V' {
-      0      20
-      1      20
-      2      20
-      3      20
-      4      20
-      b      20
-      c      20
-      d      20
-      e      20
-      10      20
-      11      20
-      12      20
-      13      20
-      14      20
-      15      20
-      16      21
+      0      31
+      1      31
+      2      31
+      3      31
+      4      31
+      b      31
+      c      31
+      d      31
+      e      31
+      10      31
+      11      31
+      12      31
+      13      31
+      14      31
+      15      31
+      16      32
    }
 
    method 'printShort (S)V' {
-      0      24
-      1      24
-      2      24
-      3      24
-      4      24
-      b      24
-      c      24
-      d      24
-      e      24
-      10      24
-      11      24
-      12      24
-      13      24
-      14      24
-      15      24
-      16      25
+      0      35
+      1      35
+      2      35
+      3      35
+      4      35
+      b      35
+      c      35
+      d      35
+      e      35
+      10      35
+      11      35
+      12      35
+      13      35
+      14      35
+      15      35
+      16      36
    }
 
    method 'printInt (I)V' {
-      0      28
-      1      28
-      2      28
-      3      28
-      4      28
-      b      28
-      c      28
-      d      28
-      e      28
-      10      28
-      11      28
-      12      28
-      13      28
-      14      28
-      15      28
-      16      29
+      0      39
+      1      39
+      2      39
+      3      39
+      4      39
+      b      39
+      c      39
+      d      39
+      e      39
+      10      39
+      11      39
+      12      39
+      13      39
+      14      39
+      15      39
+      16      40
    }
 
    method 'printLong (J)V' {
-      0      32
-      1      32
-      2      32
-      3      32
-      4      32
-      b      32
-      c      32
-      d      32
-      e      32
-      10      32
-      11      32
-      12      32
-      13      32
-      14      32
-      15      32
-      16      33
+      0      43
+      1      43
+      2      43
+      3      43
+      4      43
+      b      43
+      c      43
+      d      43
+      e      43
+      10      43
+      11      43
+      12      43
+      13      43
+      14      43
+      15      43
+      16      44
    }
 
    method 'printFloat (F)V' {
-      0      36
-      1      36
-      2      36
-      3      36
-      4      36
-      b      36
-      c      36
-      d      36
-      e      36
-      10      36
-      11      36
-      12      36
-      13      36
-      14      36
-      15      36
-      16      37
+      0      47
+      1      47
+      2      47
+      3      47
+      4      47
+      b      47
+      c      47
+      d      47
+      e      47
+      10      47
+      11      47
+      12      47
+      13      47
+      14      47
+      15      47
+      16      48
    }
 
    method 'printDouble (D)V' {
-      0      40
-      1      40
-      2      40
-      3      40
-      4      40
-      b      40
-      c      40
-      d      40
-      e      40
-      10      40
-      11      40
-      12      40
-      13      40
-      14      40
-      15      40
-      16      41
+      0      51
+      1      51
+      2      51
+      3      51
+      4      51
+      b      51
+      c      51
+      d      51
+      e      51
+      10      51
+      11      51
+      12      51
+      13      51
+      14      51
+      15      51
+      16      52
    }
 
    method 'printChar (C)V' {
-      0      44
-      1      44
-      2      44
-      3      44
-      4      44
-      b      44
-      c      44
-      d      44
-      e      44
-      10      44
-      11      44
-      12      44
-      13      44
-      14      44
-      15      44
-      16      45
+      0      55
+      1      55
+      2      55
+      3      55
+      4      55
+      b      55
+      c      55
+      d      55
+      e      55
+      10      55
+      11      55
+      12      55
+      13      55
+      14      55
+      15      55
+      16      56
    }
 
    method 'getBoolean ()Z' {
-      0      48
-      1      48
+      0      59
+      1      59
    }
 
    method 'getByte ()B' {
-      0      52
-      1      52
-      2      52
+      0      63
+      1      63
+      2      63
    }
 
    method 'getShort ()S' {
-      0      56
-      1      56
-      2      56
-      3      56
+      0      67
+      1      67
+      2      67
+      3      67
    }
 
    method 'getInt ()I' {
-      0      60
-      1      60
-      2      60
+      0      71
+      1      71
+      2      71
    }
 
    method 'printNarrowed ()V' {
-      0      64
-      1      64
-      2      64
-      3      64
-      4      64
-      5      64
-      6      64
-      7      64
-      8      64
-      9      65
-      a      65
-      b      65
-      c      65
-      d      65
-      e      65
-      f      65
-      10      65
-      11      65
-      12      66
+      0      75
+      1      75
+      2      75
+      3      75
+      4      75
+      5      75
+      6      75
+      7      75
+      8      75
+      9      76
+      a      76
+      b      76
+      c      76
+      d      76
+      e      76
+      f      76
+      10      76
+      11      76
+      12      77
    }
 
    method 'constructor ()V' {
-      4      69
-      9      70
+      4      80
+      9      81
    }
 
    method 'compare (C)Z' {
-      1      73
-      2      73
-      a      73
-      c      74
-      14      74
-      16      75
-      17      75
-      1f      75
-      21      76
-      23      76
-      2b      76
-      2d      77
-      2f      77
-      37      77
-      39      78
-      3b      78
-      43      78
-      45      79
-      47      79
-      4f      79
-      51      80
-      53      80
-      5b      80
-      5d      81
-      5f      81
-      67      81
-      69      82
-      6b      82
-      73      82
-      75      83
-      77      83
-      7f      83
-      81      84
-      83      84
-      8b      84
-      8d      85
-      90      85
-      98      85
-      9a      86
+      0      84
+      1      84
+      2      84
+      a      84
+      b      85
+      c      85
+      14      85
+      15      86
+      16      86
+      17      86
+      1f      86
+      20      87
+      21      87
+      22      87
+      23      87
+      2b      87
+      2c      88
+      2d      88
+      2e      88
+      2f      88
+      37      88
+      38      89
+      39      89
+      3a      89
+      3b      89
+      43      89
+      44      90
+      45      90
+      46      90
+      47      90
+      4f      90
+      50      91
+      51      91
+      52      91
+      53      91
+      5b      91
+      5c      92
+      5d      92
+      5e      92
+      5f      92
+      67      92
+      68      93
+      69      93
+      6a      93
+      6b      93
+      73      93
+      74      94
+      75      94
+      76      94
+      77      94
+      7f      94
+      80      95
+      81      95
+      82      95
+      83      95
+      8b      95
+      8c      96
+      8d      96
+      8e      96
+      8f      96
+      90      96
+      98      96
+      99      97
+      9a      97
    }
 }
 
 Lines mapping:
-6 <-> 5
-7 <-> 6
-8 <-> 7
-9 <-> 8
-10 <-> 9
-11 <-> 10
-12 <-> 11
-13 <-> 12
-15 <-> 13
-16 <-> 14
-19 <-> 17
-20 <-> 18
-23 <-> 21
-24 <-> 22
-27 <-> 25
-28 <-> 26
-31 <-> 29
-32 <-> 30
-35 <-> 33
-36 <-> 34
-39 <-> 37
-40 <-> 38
-43 <-> 41
-44 <-> 42
-47 <-> 45
-48 <-> 46
-52 <-> 49
-56 <-> 53
-60 <-> 57
-64 <-> 61
-68 <-> 65
-69 <-> 66
-70 <-> 67
-73 <-> 70
-74 <-> 71
-77 <-> 74
-78 <-> 75
-79 <-> 76
-80 <-> 77
-81 <-> 78
-82 <-> 79
-83 <-> 80
-84 <-> 81
-85 <-> 82
-86 <-> 83
-87 <-> 84
-88 <-> 85
-89 <-> 86
-90 <-> 87
+7 <-> 7
+8 <-> 8
+9 <-> 9
+10 <-> 10
+12 <-> 13
+15 <-> 16
+16 <-> 17
+17 <-> 18
+18 <-> 19
+19 <-> 20
+20 <-> 21
+21 <-> 22
+22 <-> 23
+24 <-> 24
+25 <-> 25
+28 <-> 28
+29 <-> 29
+32 <-> 32
+33 <-> 33
+36 <-> 36
+37 <-> 37
+40 <-> 40
+41 <-> 41
+44 <-> 44
+45 <-> 45
+48 <-> 48
+49 <-> 49
+52 <-> 52
+53 <-> 53
+56 <-> 56
+57 <-> 57
+61 <-> 60
+65 <-> 64
+69 <-> 68
+73 <-> 72
+77 <-> 76
+78 <-> 77
+79 <-> 78
+82 <-> 81
+83 <-> 82
+86 <-> 85
+87 <-> 86
+88 <-> 87
+89 <-> 88
+90 <-> 89
+91 <-> 90
+92 <-> 91
+93 <-> 92
+94 <-> 93
+95 <-> 94
+96 <-> 95
+97 <-> 96
+98 <-> 97
+99 <-> 98
diff --git a/testData/src/pkg/TestPrimitives.java b/testData/src/pkg/TestPrimitives.java
index 39041eface077c7f9baba1e15c9650e11cc81fa2..fd850be462ba51cfe6f4b5ccb9f37a34e5c07543 100644
--- a/testData/src/pkg/TestPrimitives.java
+++ b/testData/src/pkg/TestPrimitives.java
@@ -1,6 +1,15 @@
 package pkg;
 
+import java.util.List;
+
 public class TestPrimitives {
+  private void testInvalidUnboxing() {
+    List<Integer> lst = null;
+    lst.remove(Integer.valueOf(0));
+    this.<Short>genericBoxing((short)0);
+  }
+
+  private <T> void genericBoxing(T value) {}
 
   public void printAll() {
     printBoolean(true);
